# Generated by Django 5.1.1 on 2024-11-30 15:11

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the article', max_length=16384)),
                ('summary', models.TextField(blank=True, default=None, help_text='Description / Abstract / Summary of the article', null=True)),
                ('publication_date', models.DateField(blank=True, default=None, help_text='Publication date of the article', null=True)),
                ('authors', models.TextField(blank=True, default=None, help_text='Authors of the article', null=True)),
                ('journal', models.CharField(blank=True, default=None, help_text='Journal where the article was published', max_length=2048, null=True)),
                ('url', models.URLField(blank=True, default=None, help_text='URL of the article', max_length=2048, null=True)),
                ('doi', models.CharField(blank=True, default=None, help_text='DOI of the article', max_length=255, null=True)),
                ('source', models.CharField(help_text='Source of the article, from where information was retrieved (e.g H2020, FP7, ...)', max_length=255)),
                ('source_id', models.CharField(blank=True, default=None, help_text='ID of the article in the source database', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EscoSkill',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, help_text='The label of the skill', max_length=2048, null=True)),
                ('alternative_labels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), default=list, help_text='Alternative labels of the skill', size=None)),
                ('description', models.TextField(blank=True, help_text='Description of the skill', null=True)),
                ('knowledge_ancestors', models.JSONField(help_text='The knowledge pillar ancestors of the skill (list of lists of strings)')),
                ('language_ancestors', models.JSONField(help_text='The language pillar ancestors of the skill (list of lists of strings)')),
                ('skill_ancestors', models.JSONField(help_text='The skill pillar ancestors of the skill (list of lists of strings)')),
                ('traversal_ancestors', models.JSONField(help_text='The traversal pillar ancestors of the skill (list of lists of strings)')),
                ('knowledge_levels', models.JSONField(help_text='The levels of the skill in knowledge paths')),
                ('language_levels', models.JSONField(help_text='The levels of the skill in language paths')),
                ('skill_levels', models.JSONField(help_text='The levels of the skill in skill paths')),
                ('traversal_levels', models.JSONField(help_text='The levels of the skill in traversal paths')),
                ('children', models.JSONField(help_text='The children (direct descendants) of the skill')),
            ],
        ),
        migrations.CreateModel(
            name='IscoOccupation',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, help_text='The label of the occupation', max_length=2048, null=True)),
                ('alternative_labels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2048), default=list, help_text='Alternative labels of the occupation', size=None)),
                ('description', models.TextField(blank=True, help_text='Description of the occupation', null=True)),
                ('ancestors', models.JSONField(help_text='The ancestors of the occupation (list of lists of strings)')),
                ('levels', models.JSONField(help_text='The levels of the occupation')),
                ('children', models.JSONField(help_text='The children (direct descendants) of the occupation')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the job', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the job.', null=True)),
                ('experience_level', models.CharField(blank=True, help_text='Experience level required for the job. E.g Junior, Senior, ...', max_length=16384, null=True)),
                ('type', models.CharField(blank=True, help_text='Type of the job. E.g Full-time, Part-time, ...', max_length=16384, null=True)),
                ('location', models.CharField(blank=True, help_text='Location of the job.', max_length=16384, null=True)),
                ('upload_date', models.DateField(blank=True, help_text='Date when the job was uploaded.', null=True)),
                ('source', models.CharField(help_text='Source of the job, from where information was retrieved (e.g LinkedIn, ...)', max_length=255)),
                ('source_id', models.CharField(blank=True, help_text='ID of the job in the source database', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='KeyValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=512, unique=True)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the course', max_length=16384)),
                ('description', models.TextField(blank=True, help_text='Description of the course', null=True)),
                ('creation_date', models.DateField(blank=True, help_text='Creation date of the course', null=True)),
                ('rating', models.FloatField(help_text='Rating of the course (0-10)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('price', models.FloatField(blank=True, help_text='Price of the course', null=True)),
                ('url', models.URLField(help_text='URL of the course', max_length=2048)),
                ('source', models.CharField(help_text='Source of the course, from where information was retrieved (e.g Udemy, ...)', max_length=255)),
                ('source_id', models.CharField(blank=True, help_text='ID of the course in the source database', max_length=255, null=True)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['title', 'description'], name='course_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops'])],
                'constraints': [models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_course')],
            },
        ),
        migrations.CreateModel(
            name='CourseSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(help_text='The course that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.course')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with a course.', on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(help_text='The article that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.article')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with an article.', on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='JobOccupation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job', models.ForeignKey(help_text='The job that is matched with an occupation.', on_delete=django.db.models.deletion.CASCADE, related_name='occupations', to='api.job')),
                ('occupation', models.ForeignKey(help_text='The occupation that is matched with a job.', on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='api.iscooccupation')),
            ],
        ),
        migrations.CreateModel(
            name='JobSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job', models.ForeignKey(help_text='The job that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.job')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with a job.', on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='LawPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the law/policy', max_length=16384)),
                ('summary', models.TextField(blank=True, help_text='Summary of the law/policy', null=True)),
                ('authors', models.TextField(blank=True, help_text='Authors of the law/policy', null=True)),
                ('publication_date', models.DateField(blank=True, help_text='Publication date of the law/policy', null=True)),
                ('page_count', models.IntegerField(blank=True, help_text='Number of pages in the law/policy', null=True)),
                ('type', models.CharField(blank=True, help_text='Type of the law/policy', max_length=2048, null=True)),
                ('url', models.URLField(blank=True, help_text='URL of the law/policy', max_length=2048, null=True)),
                ('source', models.CharField(help_text='Source of the law/policy, from where information was retrieved (e.g open-europa, ...)', max_length=255)),
                ('source_id', models.CharField(blank=True, help_text='ID of the law/policy in the source database', max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Law policies',
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['title', 'summary', 'authors'], name='law_policy_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops'])],
                'constraints': [models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_law_policy')],
            },
        ),
        migrations.CreateModel(
            name='LawPolicySkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('law_policy', models.ForeignKey(help_text='The law/policy that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.lawpolicy')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with a law.', on_delete=django.db.models.deletion.CASCADE, related_name='law_policies', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='LawPublication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the law publication', max_length=16384)),
                ('authors', models.TextField(blank=True, help_text='Authors of the law publication', null=True)),
                ('publication_date', models.DateField(blank=True, help_text='Publication date of the law publication', null=True)),
                ('summary', models.TextField(blank=True, help_text='Summary of the law publication', null=True)),
                ('url', models.URLField(blank=True, help_text='URL of the law publication', max_length=2048, null=True)),
                ('isbn', models.CharField(blank=True, help_text='ISBN of the law publication', max_length=1024, null=True)),
                ('source', models.CharField(help_text='Source of the law publication, from where information was retrieved (e.g open-europa, ...)', max_length=255)),
                ('source_id', models.CharField(blank=True, help_text='ID of the law publication in the source database', max_length=255, null=True)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['title', 'authors', 'summary'], name='law_publication_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops'])],
                'constraints': [models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_law_publication')],
            },
        ),
        migrations.CreateModel(
            name='LawPublicationSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('law_publication', models.ForeignKey(help_text='The law publication that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.lawpublication')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with a law publication.', on_delete=django.db.models.deletion.CASCADE, related_name='law_publications', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the organization', max_length=16384)),
                ('description', models.TextField(blank=True, help_text='Description of the organization', null=True)),
                ('url', models.URLField(blank=True, help_text="URL of organization's website", max_length=2048, null=True)),
                ('country', models.CharField(blank=True, help_text='Country of the organization', max_length=255, null=True)),
                ('city', models.CharField(blank=True, help_text='City of the organization', max_length=255, null=True)),
                ('postcode', models.CharField(blank=True, help_text='Postcode of the organization', max_length=255, null=True)),
                ('street', models.CharField(blank=True, help_text='Street of the organization', max_length=255, null=True)),
                ('source', models.CharField(blank=True, help_text='Source of the organization, from where information was retrieved (e.g H2020, FP7, ...)', max_length=255, null=True)),
                ('source_id', models.CharField(blank=True, help_text='ID of the organization in the source database', max_length=255, null=True)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['name', 'description'], name='organization_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops'])],
                'constraints': [models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_organization')],
            },
        ),
        migrations.AddField(
            model_name='job',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization that the job is part of.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='api.organization'),
        ),
        migrations.CreateModel(
            name='OrganizationSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(help_text='The organization that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.organization')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with an organization.', on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, help_text='Name of the user.', max_length=16384, null=True)),
                ('location', models.CharField(blank=True, help_text='Location of the user.', max_length=16384, null=True)),
                ('content', models.TextField(blank=True, help_text="The content of the user's profile.", null=True)),
                ('occupation', models.CharField(blank=True, help_text='Occupation of the user.', max_length=16384, null=True)),
                ('url', models.URLField(blank=True, help_text="The URL of the user's profile.", max_length=1024, null=True)),
                ('source', models.CharField(help_text='Source of the profile, from where information was retrieved (e.g LinkedIn, StackOverflow...)', max_length=255)),
                ('source_id', models.CharField(blank=True, help_text='ID of the profile in the source database', max_length=255, null=True)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['full_name', 'location', 'content', 'occupation'], name='profile_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops'])],
                'constraints': [models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_profile')],
            },
        ),
        migrations.CreateModel(
            name='ProfileSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.ForeignKey(help_text='The profile that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.profile')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with a profile.', on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='api.escoskill')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the project', max_length=16384)),
                ('start_date', models.DateField(blank=True, help_text='Start date of the project', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of the project', null=True)),
                ('total_cost', models.FloatField(blank=True, help_text='Total cost of the project', null=True)),
                ('objective', models.TextField(blank=True, help_text='Objective of the project', null=True)),
                ('url', models.URLField(blank=True, help_text="URL of the project (e.g project's website)", max_length=2048, null=True)),
                ('source', models.CharField(help_text='Source of the project, from where information was retrieved (e.g H2020, FP7, ...)', max_length=255)),
                ('source_id', models.CharField(blank=True, help_text='ID of the project in the source database', max_length=255, null=True)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['title', 'objective'], name='project_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops'])],
                'constraints': [models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_project')],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='project',
            field=models.ForeignKey(blank=True, default=None, help_text='The project that the article is related to (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publications', to='api.project'),
        ),
        migrations.CreateModel(
            name='ProjectOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, help_text='Role of the organization in the project', max_length=16384, null=True)),
                ('organization', models.ForeignKey(help_text='Organization that is part of the project.', on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='api.organization')),
                ('project', models.ForeignKey(help_text='The project that the organization is part of.', on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='api.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(help_text='The project that is matched with a skill.', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.project')),
                ('skill', models.ForeignKey(help_text='The skill that is matched with a project.', on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='api.escoskill')),
            ],
        ),
        migrations.AddIndex(
            model_name='job',
            index=django.contrib.postgres.indexes.GinIndex(fields=['title', 'description', 'location', 'type', 'experience_level'], name='job_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops', 'gin_trgm_ops']),
        ),
        migrations.AddConstraint(
            model_name='job',
            constraint=models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_job'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=django.contrib.postgres.indexes.GinIndex(fields=['title', 'summary'], name='article_search', opclasses=['gin_trgm_ops', 'gin_trgm_ops']),
        ),
        migrations.AddConstraint(
            model_name='article',
            constraint=models.UniqueConstraint(fields=('source', 'source_id'), name='unique_source_article'),
        ),
    ]
